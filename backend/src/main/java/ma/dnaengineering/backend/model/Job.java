package ma.dnaengineering.backend.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Represents a job entity in the system.
 * This entity contains information about job postings, such as title, description, location, and salary.
 */
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Job {

    /**
     * The unique identifier for the job.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title of the job.
     * Must not be blank.
     */
    @NotBlank(message = "Title is required")
    private String title;

    /**
     * The detailed description of the job.
     * Must not be blank.
     * Stored as a `TEXT` type in the database.
     */
    @NotBlank(message = "Description is required")
    @Column(columnDefinition = "TEXT")
    private String description;

    /**
     * The location where the job is based.
     * This field is optional.
     */
    private String location;

    /**
     * The salary for the job.
     * Must be a non-null value and must be non-negative.
     */
    @NotNull
    @Min(value = 0, message = "Salary must be non-negative")
    private BigDecimal salary;

    /**
     * The timestamp when the job was posted.
     * This value is automatically set when the job is created.
     * Cannot be updated after creation.
     */
    @Column(updatable = false)
    private LocalDateTime postedAt;

    /**
     * The timestamp when the job was last updated.
     * Automatically updated whenever the job entity is modified.
     */
    private LocalDateTime updatedAt;

    /**
     * Sets the `postedAt` timestamp to the current date and time when the entity is persisted for the first time.
     * This ensures the posted timestamp is automatically populated.
     */
    @PrePersist
    protected void onCreate() {
        this.postedAt = LocalDateTime.now();
    }

    /**
     * Sets the `updatedAt` timestamp to the current date and time whenever the entity is updated.
     * This ensures the updated timestamp is always accurate.
     */
    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}
